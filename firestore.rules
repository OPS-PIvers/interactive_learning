rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidProject() {
      let data = request.resource.data;
      return data.keys().hasAll(['title', 'description', 'createdBy']) &&
             data.title is string && data.title.size() <= 200 &&
             data.description is string && data.description.size() <= 1000 &&
             data.createdBy is string &&
             // Optional legacy fields
             (!data.keys().has('thumbnailUrl') || data.thumbnailUrl is string || data.thumbnailUrl == null) &&
             (!data.keys().has('backgroundImage') || data.backgroundImage is string || data.backgroundImage == null) &&
             (!data.keys().has('imageFitMode') || data.imageFitMode is string) &&
             (!data.keys().has('viewerModes') || data.viewerModes is map) &&
             // --- New Slide Deck Validation ---
             // The slideDeck field is optional. If it doesn't exist, this is true.
             // If it does exist, it must be a valid slide deck.
             (!data.keys().has('slideDeck') || (data.slideDeck is map && isValidSlideDeck(data.slideDeck)));
    }
    
    function isValidHotspot() {
      return request.resource.data.keys().hasAll(['x', 'y', 'title']) &&
             request.resource.data.x is number &&
             request.resource.data.y is number &&
             request.resource.data.x >= 0 && request.resource.data.x <= 100 &&
             request.resource.data.y >= 0 && request.resource.data.y <= 100 &&
             request.resource.data.title is string &&
             request.resource.data.title.size() <= 100;
    }
    
    function isValidTimelineEvent() {
      return request.resource.data.keys().hasAll(['step', 'name']) &&
             request.resource.data.step is number &&
             request.resource.data.step > 0 &&
             request.resource.data.name is string &&
             request.resource.data.name.size() <= 100;
    }

    // --- Slide-Based Architecture Validation Functions ---

    function isValidFixedPosition(pos) {
      return pos is map &&
             pos.keys().hasAll(['x', 'y', 'width', 'height']) &&
             pos.x is number && pos.y is number &&
             pos.width is number && pos.height is number;
    }

    function isValidResponsivePosition(pos) {
      return pos is map &&
             pos.keys().hasAll(['desktop', 'tablet', 'mobile']) &&
             isValidFixedPosition(pos.desktop) &&
             isValidFixedPosition(pos.tablet) &&
             isValidFixedPosition(pos.mobile);
    }

    // Content validation functions for different element types
    function isValidHotspotContent(content) {
      return content is map &&
             content.keys().hasAll(['title', 'description']) &&
             content.title is string && content.title.size() <= 200 &&
             content.description is string && content.description.size() <= 1000;
    }

    function isValidTextContent(content) {
      return content is map &&
             content.keys().hasAll(['text']) &&
             content.text is string && content.text.size() <= 5000;
    }

    function isValidMediaContent(content) {
      return content is map &&
             content.keys().hasAll(['src', 'type']) &&
             content.src is string &&
             content.type is string &&
             (content.type == 'image' || content.type == 'video' || content.type == 'audio');
    }

    function isValidShapeContent(content) {
      return content is map &&
             content.keys().hasAll(['shapeType']) &&
             content.shapeType is string &&
             (content.shapeType == 'rectangle' || content.shapeType == 'circle' || content.shapeType == 'triangle');
    }

    function isValidElementStyle(style) {
      return style is map &&
             // Common style properties - all optional
             (!style.keys().has('backgroundColor') || style.backgroundColor is string) &&
             (!style.keys().has('borderColor') || style.borderColor is string) &&
             (!style.keys().has('borderWidth') || style.borderWidth is number) &&
             (!style.keys().has('borderRadius') || style.borderRadius is number) &&
             (!style.keys().has('opacity') || (style.opacity is number && style.opacity >= 0 && style.opacity <= 1)) &&
             (!style.keys().has('fontSize') || style.fontSize is number) &&
             (!style.keys().has('fontWeight') || style.fontWeight is string) &&
             (!style.keys().has('color') || style.color is string);
    }

    function isValidLayout(layout) {
      return layout is map &&
             // Layout properties - all optional
             (!layout.keys().has('backgroundColor') || layout.backgroundColor is string) &&
             (!layout.keys().has('backgroundImage') || layout.backgroundImage is string) &&
             (!layout.keys().has('padding') || layout.padding is number) &&
             (!layout.keys().has('margin') || layout.margin is number);
    }

    function isValidSlideElement(element) {
      return element is map &&
             element.keys().hasAll(['id', 'type', 'position', 'content', 'style', 'isVisible']) &&
             element.id is string &&
             element.type is string &&
             (element.type == 'hotspot' || element.type == 'text' || element.type == 'media' || element.type == 'shape') &&
             isValidResponsivePosition(element.position) &&
             // Validate content based on element type
             (
               (element.type == 'hotspot' && isValidHotspotContent(element.content)) ||
               (element.type == 'text' && isValidTextContent(element.content)) ||
               (element.type == 'media' && isValidMediaContent(element.content)) ||
               (element.type == 'shape' && isValidShapeContent(element.content))
             ) &&
             isValidElementStyle(element.style) &&
             element.isVisible is bool;
    }

    function isValidInteractiveSlide(slide) {
      let elements = slide.get('elements', []);
      return slide is map &&
             slide.keys().hasAll(['id', 'title', 'elements', 'layout']) &&
             slide.id is string &&
             slide.title is string &&
             slide.title.size() < 200 &&
             slide.elements is list &&
             elements.size() <= 50 && // Reasonable limit for elements per slide
             // Validate all elements up to a reasonable limit
             (elements.size() < 1 || isValidSlideElement(elements[0])) &&
             (elements.size() < 2 || isValidSlideElement(elements[1])) &&
             (elements.size() < 3 || isValidSlideElement(elements[2])) &&
             (elements.size() < 4 || isValidSlideElement(elements[3])) &&
             (elements.size() < 5 || isValidSlideElement(elements[4])) &&
             (elements.size() < 6 || isValidSlideElement(elements[5])) &&
             (elements.size() < 7 || isValidSlideElement(elements[6])) &&
             (elements.size() < 8 || isValidSlideElement(elements[7])) &&
             (elements.size() < 9 || isValidSlideElement(elements[8])) &&
             (elements.size() < 10 || isValidSlideElement(elements[9])) &&
             (elements.size() < 11 || isValidSlideElement(elements[10])) &&
             (elements.size() < 12 || isValidSlideElement(elements[11])) &&
             (elements.size() < 13 || isValidSlideElement(elements[12])) &&
             (elements.size() < 14 || isValidSlideElement(elements[13])) &&
             (elements.size() < 15 || isValidSlideElement(elements[14])) &&
             (elements.size() < 16 || isValidSlideElement(elements[15])) &&
             (elements.size() < 17 || isValidSlideElement(elements[16])) &&
             (elements.size() < 18 || isValidSlideElement(elements[17])) &&
             (elements.size() < 19 || isValidSlideElement(elements[18])) &&
             (elements.size() < 20 || isValidSlideElement(elements[19])) &&
             isValidLayout(slide.layout);
    }

    function isValidDeckSettings(settings) {
        return settings is map &&
               settings.keys().hasAll(['autoAdvance', 'allowNavigation', 'showProgress', 'showControls']) &&
               settings.autoAdvance is bool &&
               settings.allowNavigation is bool &&
               settings.showProgress is bool &&
               settings.showControls is bool;
    }

    function isValidDeckMetadata(metadata) {
        return metadata is map &&
               metadata.keys().hasAll(['created', 'modified', 'version', 'isPublic']) &&
               metadata.created is number &&
               metadata.modified is number &&
               metadata.version is string &&
               metadata.isPublic is bool;
    }

    function isValidSlideDeck(deck) {
      let slides = deck.get('slides', []);
      return deck is map &&
             deck.keys().hasAll(['id', 'title', 'slides', 'settings', 'metadata']) &&
             deck.id is string &&
             deck.title is string &&
             deck.slides is list &&
             slides.size() <= 100 && // Reasonable limit for slides per deck
             // Validate all slides up to a reasonable limit
             (slides.size() < 1 || isValidInteractiveSlide(slides[0])) &&
             (slides.size() < 2 || isValidInteractiveSlide(slides[1])) &&
             (slides.size() < 3 || isValidInteractiveSlide(slides[2])) &&
             (slides.size() < 4 || isValidInteractiveSlide(slides[3])) &&
             (slides.size() < 5 || isValidInteractiveSlide(slides[4])) &&
             (slides.size() < 6 || isValidInteractiveSlide(slides[5])) &&
             (slides.size() < 7 || isValidInteractiveSlide(slides[6])) &&
             (slides.size() < 8 || isValidInteractiveSlide(slides[7])) &&
             (slides.size() < 9 || isValidInteractiveSlide(slides[8])) &&
             (slides.size() < 10 || isValidInteractiveSlide(slides[9])) &&
             (slides.size() < 11 || isValidInteractiveSlide(slides[10])) &&
             (slides.size() < 12 || isValidInteractiveSlide(slides[11])) &&
             (slides.size() < 13 || isValidInteractiveSlide(slides[12])) &&
             (slides.size() < 14 || isValidInteractiveSlide(slides[13])) &&
             (slides.size() < 15 || isValidInteractiveSlide(slides[14])) &&
             (slides.size() < 16 || isValidInteractiveSlide(slides[15])) &&
             (slides.size() < 17 || isValidInteractiveSlide(slides[16])) &&
             (slides.size() < 18 || isValidInteractiveSlide(slides[17])) &&
             (slides.size() < 19 || isValidInteractiveSlide(slides[18])) &&
             (slides.size() < 20 || isValidInteractiveSlide(slides[19])) &&
             isValidDeckSettings(deck.settings) &&
             isValidDeckMetadata(deck.metadata);
    }
    
    // Projects collection - require authentication and ownership
    match /projects/{projectId} {
      allow read: if isAuthenticated() && isOwner(resource.data.createdBy) || resource.data.isPublished == true;
      
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.createdBy) &&
                       isValidProject();
      
      allow update: if isAuthenticated() && 
                       isOwner(resource.data.createdBy) &&
                       isValidProject();
      
      allow delete: if isAuthenticated() && 
                       isOwner(resource.data.createdBy);
      
      // Hotspots subcollection
      match /hotspots/{hotspotId} {
        allow read: if (isAuthenticated() && 
                             isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.createdBy)) || (get(/databases/$(database)/documents/projects/$(projectId)).data.isPublished == true);
        allow write: if isAuthenticated() && 
                             isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.createdBy);
      }
      
      // Timeline events subcollection  
      match /timeline_events/{eventId} {
        allow read: if (isAuthenticated() && 
                             isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.createdBy)) || (get(/databases/$(database)/documents/projects/$(projectId)).data.isPublished == true);
        allow write: if isAuthenticated() && 
                             isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.createdBy);
      }
    }
    
    // User profiles collection
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Cross-device sync collection - used for real-time progress sharing
    // This allows the project owner to read/write to sync documents.
    // The rule ensures that a user can only access the sync data for projects they own.
    match /crossDeviceSync/{syncId} {
      allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/projects/$(syncId)).data.createdBy == request.auth.uid;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}