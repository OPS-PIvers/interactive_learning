rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidProject() {
      return request.resource.data.keys().hasAll(['title', 'description', 'createdBy']) &&
             request.resource.data.title is string &&
             request.resource.data.description is string &&
             request.resource.data.createdBy is string &&
             request.resource.data.title.size() <= 200 &&
             request.resource.data.description.size() <= 1000 &&
             // Optional fields validation
             (request.resource.data.keys().hasAny(['thumbnailUrl']) == false || request.resource.data.thumbnailUrl is string || request.resource.data.thumbnailUrl == null) &&
             (request.resource.data.keys().hasAny(['backgroundImage']) == false || request.resource.data.backgroundImage is string || request.resource.data.backgroundImage == null) &&
             (request.resource.data.keys().hasAny(['imageFitMode']) == false || request.resource.data.imageFitMode is string) &&
             (request.resource.data.keys().hasAny(['viewerModes']) == false || request.resource.data.viewerModes is map);
    }
    
    function isValidHotspot() {
      return request.resource.data.keys().hasAll(['x', 'y', 'title']) &&
             request.resource.data.x is number &&
             request.resource.data.y is number &&
             request.resource.data.x >= 0 && request.resource.data.x <= 100 &&
             request.resource.data.y >= 0 && request.resource.data.y <= 100 &&
             request.resource.data.title is string &&
             request.resource.data.title.size() <= 100;
    }
    
    function isValidTimelineEvent() {
      return request.resource.data.keys().hasAll(['step', 'name']) &&
             request.resource.data.step is number &&
             request.resource.data.step > 0 &&
             request.resource.data.name is string &&
             request.resource.data.name.size() <= 100;
    }
    
    // Projects collection - require authentication and ownership
    match /projects/{projectId} {
      allow read: if isAuthenticated() && isOwner(resource.data.createdBy) || resource.data.isPublished == true;
      
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.createdBy) &&
                       isValidProject();
      
      allow update: if isAuthenticated() && 
                       isOwner(resource.data.createdBy) &&
                       isValidProject();
      
      allow delete: if isAuthenticated() && 
                       isOwner(resource.data.createdBy);
      
      // Hotspots subcollection
      match /hotspots/{hotspotId} {
        allow read: if (isAuthenticated() && 
                             isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.createdBy)) || (get(/databases/$(database)/documents/projects/$(projectId)).data.isPublished == true);
        allow write: if isAuthenticated() && 
                             isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.createdBy);
      }
      
      // Timeline events subcollection  
      match /timeline_events/{eventId} {
        allow read: if (isAuthenticated() && 
                             isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.createdBy)) || (get(/databases/$(database)/documents/projects/$(projectId)).data.isPublished == true);
        allow write: if isAuthenticated() && 
                             isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.createdBy);
      }
    }
    
    // User profiles collection
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Cross-device sync collection - used for real-time progress sharing
    // This allows the project owner to read/write to sync documents.
    // The rule ensures that a user can only access the sync data for projects they own.
    match /crossDeviceSync/{syncId} {
      allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/projects/$(syncId)).data.createdBy == request.auth.uid;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}