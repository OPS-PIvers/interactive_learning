name: Claude Code PR Automation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  claude-review:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run initial tests
        run: npm run test:run
        continue-on-error: true

      - name: Wait for automated code reviews
        run: |
          echo "Waiting 3 minutes for automated code review tools to complete..."
          sleep 180

      - name: Fetch all PR comments and extract code review feedback
        id: review-feedback
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Fetch both general PR comments and line-level review comments
              const [{ data: comments }, { data: reviewComments }] = await Promise.all([
                github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number
                }),
                github.rest.pulls.listReviewComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number
                })
              ]);
              
              // Combine both types of comments
              const allComments = [
                ...comments.map(c => ({ ...c, type: 'general', file: null, line: null })),
                ...reviewComments.map(c => ({ ...c, type: 'review', file: c.path, line: c.line }))
              ];
            
            // Collect all relevant code review feedback
            let allFeedback = [];
            const qualityIndicators = [
              'security', 'vulnerability', 'performance', 'bug', 'error', 'issue',
              'improvement', 'optimize', 'refactor', 'best practice', 'convention',
              'type safety', 'accessibility', 'responsive', 'mobile', 'test',
              'memory leak', 'race condition', 'async', 'await', 'promise'
            ];
            
            const codeReviewBots = [
              'gemini-code-assist', 'github-copilot', 'copilot', 'sonarcloud',
              'codeclimate', 'deepsource', 'codeacy', 'snyk-bot', 'dependabot'
            ];
            
            for (const comment of allComments) {
              const isFromBot = codeReviewBots.some(bot => 
                comment.user.login.toLowerCase().includes(bot) ||
                comment.body.toLowerCase().includes(bot)
              );
              
              const hasQualityContent = qualityIndicators.some(indicator =>
                comment.body.toLowerCase().includes(indicator)
              );
              
              // Include comments from known code review tools or high-quality human feedback
              if (isFromBot || hasQualityContent || comment.body.length > 100) {
                const feedback = {
                  author: comment.user.login,
                  body: comment.body,
                  created_at: comment.created_at,
                  isBot: isFromBot,
                  type: comment.type,
                  file: comment.file,
                  line: comment.line
                };
                allFeedback.push(feedback);
                console.log(`Found ${isFromBot ? 'automated' : 'quality'} feedback from ${comment.user.login}`);
              }
            }
            
            if (allFeedback.length > 0) {
              // Combine all feedback into a structured format
              const combinedFeedback = allFeedback.map(f => {
                const location = f.file ? ` (${f.file}${f.line ? `:${f.line}` : ''})` : '';
                const typeLabel = f.type === 'review' ? 'Code Review' : 'General Comment';
                return `**${typeLabel} from ${f.author}${location} (${f.isBot ? 'Automated Tool' : 'Reviewer'}):**\n${f.body}`;
              }).join('\n\n---\n\n');
              
              console.log(`Found ${allFeedback.length} relevant feedback comments`);
              core.setOutput('feedback', combinedFeedback);
              core.setOutput('has_feedback', 'true');
              core.setOutput('feedback_count', allFeedback.length.toString());
            } else {
              console.log('No relevant code review feedback found in PR comments');
              core.setOutput('feedback', '');
              core.setOutput('has_feedback', 'false');
              core.setOutput('feedback_count', '0');
            }
            } catch (error) {
              console.error('Error fetching PR comments:', error);
              core.setOutput('feedback', '');
              core.setOutput('has_feedback', 'false');
            }

      - name: Claude Code Review and Fix
        uses: anthropics/claude-code-action@beta
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          allowed_tools: bash
          direct_prompt: |
            ${{ steps.review-feedback.outputs.has_feedback == 'true' && format('PRIORITY: Address the following feedback from code review tools and reviewers ({0} comments found):
            
            {1}
            
            Based on this feedback, review the PR and implement all valid suggestions. Additionally, ensure:', steps.review-feedback.outputs.feedback_count, steps.review-feedback.outputs.feedback) || 'Review this PR thoroughly and make any necessary changes to ensure:' }}
            1. Code follows project conventions in CLAUDE.md
            2. TypeScript types are correct
            3. All tests pass
            4. No security vulnerabilities
            5. Proper error handling
            6. Accessibility requirements met
            7. Mobile responsiveness maintained
            
            Fix any issues found and commit the changes directly to this PR branch.
          
      - name: Run tests after Claude fixes
        run: npm run test:run

      - name: Build project
        run: npm run build

      - name: Check if PR is ready for merge
        id: merge-check
        run: |
          # Check if tests pass and build succeeds
          if npm run test:run && npm run build; then
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            echo "ready=false" >> $GITHUB_OUTPUT
          fi

      - name: Auto-merge PR if ready
        if: steps.merge-check.outputs.ready == 'true'
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --squash --auto
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete branch after merge
        if: steps.merge-check.outputs.ready == 'true'
        run: |
          # Wait a bit for merge to complete, then delete branch
          sleep 10
          gh api repos/${{ github.repository }}/git/refs/heads/${{ github.head_ref }} -X DELETE || echo "Branch already deleted"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  claude-comment-trigger:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Claude Code Response
        uses: anthropics/claude-code-action@beta
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          allowed_tools: bash
          trigger_phrase: "@claude"
