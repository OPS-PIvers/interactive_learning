name: Claude Code PR Automation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  claude-review:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Run for all PRs including AI agents (copilot, jules, claude)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run initial tests
        run: npm run test:run
        continue-on-error: true

      - name: Wait for automated code reviews
        run: |
          echo "Waiting 2 minutes for automated code review tools to complete..."
          sleep 120

      - name: Fetch all PR comments and extract code review feedback
        id: review-feedback
        uses: actions/github-script@v7
        with:
          script: |
            try {
              console.log(`Processing PR #${context.payload.pull_request.number}`);
              
              // Fetch both general PR comments and line-level review comments
              const [{ data: comments }, { data: reviewComments }] = await Promise.all([
                github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number
                }),
                github.rest.pulls.listReviewComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number
                })
              ]);
              
              console.log(`Found ${comments.length} general comments and ${reviewComments.length} review comments`);
              
              // Combine both types of comments
              const allComments = [
                ...comments.map(c => ({ ...c, type: 'general', file: null, line: null })),
                ...reviewComments.map(c => ({ ...c, type: 'review', file: c.path, line: c.line }))
              ];
            
            // Collect all relevant code review feedback
            let allFeedback = [];
            const qualityIndicators = [
              'security', 'vulnerability', 'performance', 'bug', 'error', 'issue',
              'improvement', 'optimize', 'refactor', 'best practice', 'convention',
              'type safety', 'accessibility', 'responsive', 'mobile', 'test',
              'memory leak', 'race condition', 'async', 'await', 'promise'
            ];
            
            const codeReviewBots = [
              'copilot', 'github-copilot', 'copilot-swe-agent',
              'gemini', 'gemini-code-assist', 'google-labs-jules', 'jules',
              'sonarcloud', 'codeclimate', 'deepsource', 'codeacy', 'snyk-bot', 'dependabot'
            ];
            
            for (const comment of allComments) {
              const isFromBot = codeReviewBots.some(bot => 
                comment.user.login.toLowerCase().includes(bot.toLowerCase()) ||
                comment.body.toLowerCase().includes(bot.toLowerCase())
              ) || comment.user.login.toLowerCase() === 'copilot';
              
              const hasQualityContent = qualityIndicators.some(indicator =>
                comment.body.toLowerCase().includes(indicator)
              );
              
              // Include comments from known code review tools or high-quality human feedback
              if (isFromBot || hasQualityContent || comment.body.length > 100) {
                const feedback = {
                  author: comment.user.login,
                  body: comment.body,
                  created_at: comment.created_at,
                  isBot: isFromBot,
                  type: comment.type,
                  file: comment.file,
                  line: comment.line
                };
                allFeedback.push(feedback);
                console.log(`Found ${isFromBot ? 'automated' : 'quality'} feedback from ${comment.user.login}: ${comment.body.substring(0, 100)}...`);
              }
            }
            
            if (allFeedback.length > 0) {
              // Combine all feedback into a structured format
              const combinedFeedback = allFeedback.map(f => {
                const location = f.file ? ` (${f.file}${f.line ? `:${f.line}` : ''})` : '';
                const typeLabel = f.type === 'review' ? 'Code Review' : 'General Comment';
                return `**${typeLabel} from ${f.author}${location} (${f.isBot ? 'Automated Tool' : 'Reviewer'}):**\n${f.body}`;
              }).join('\n\n---\n\n');
              
              console.log(`Found ${allFeedback.length} relevant feedback comments`);
              core.setOutput('feedback', combinedFeedback);
              core.setOutput('has_feedback', 'true');
              core.setOutput('feedback_count', allFeedback.length.toString());
            } else {
              console.log('No relevant code review feedback found in PR comments');
              core.setOutput('feedback', '');
              core.setOutput('has_feedback', 'false');
              core.setOutput('feedback_count', '0');
            }
            } catch (error) {
              console.error('Error fetching PR comments:', error);
              core.setOutput('feedback', '');
              core.setOutput('has_feedback', 'false');
            }

      - name: Claude Code Review and Fix
        uses: anthropics/claude-code-action@beta
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          allowed_bots: '*'
          allowed_tools: bash
          direct_prompt: |
            ${{ steps.review-feedback.outputs.has_feedback == 'true' && format('PRIORITY: Address the following feedback from code review tools and reviewers ({0} comments found):
            
            {1}
            
            Based on this feedback, review the PR and implement all valid suggestions. Pay special attention to GitHub Copilot and Gemini comments which provide valuable code quality insights. Additionally, ensure:', steps.review-feedback.outputs.feedback_count, steps.review-feedback.outputs.feedback) || 'Review this PR thoroughly and make any necessary changes to ensure:' }}
            1. Code follows project conventions in CLAUDE.md
            2. TypeScript types are correct and Promise patterns are consistent
            3. All tests pass after changes
            4. No security vulnerabilities
            5. Proper error handling with consistent patterns
            6. Accessibility requirements met
            7. Mobile responsiveness maintained
            8. Address any automated tool suggestions (GitHub Copilot, Gemini, ESLint, etc.)
            
            Fix any issues found and commit the changes directly to this PR branch. If Copilot or Gemini suggest code improvements, implement them unless there's a specific reason not to.
          
      - name: Initial TypeScript type checking
        id: initial-typecheck
        run: |
          echo "Running initial TypeScript type checking..."
          if npm run typecheck 2>&1; then
            echo "typecheck_passed=true" >> $GITHUB_OUTPUT
            echo "✅ TypeScript checks passed initially"
          else
            echo "typecheck_passed=false" >> $GITHUB_OUTPUT
            echo "❌ TypeScript errors found - will attempt to fix"
          fi
        continue-on-error: true

      - name: Fix TypeScript errors if found
        if: steps.initial-typecheck.outputs.typecheck_passed == 'false'
        uses: anthropics/claude-code-action@beta
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          allowed_bots: '*'
          allowed_tools: Edit,MultiEdit,Glob,Grep,LS,Read,Write,bash
          direct_prompt: |
            CRITICAL: TypeScript errors detected in the codebase. 
            
            Run `npm run typecheck` to see the exact TypeScript errors, then fix ALL of them.
            
            Requirements:
            1. Fix every TypeScript error shown by `npm run typecheck`
            2. Do NOT use @ts-ignore or any type suppression
            3. Use proper TypeScript types and type guards
            4. Test your fixes by running `npm run typecheck` again
            5. Only commit when `npm run typecheck` passes with zero errors
            6. If you cannot fix an error properly, explain why in the commit message
            
            This is a one-time fix attempt. If TypeScript errors remain after your changes, the PR will be rejected.

      - name: Final TypeScript type checking
        id: final-typecheck
        run: |
          echo "Running final TypeScript type checking..."
          if npm run typecheck 2>&1; then
            echo "typecheck_passed=true" >> $GITHUB_OUTPUT
            echo "✅ TypeScript checks passed"
          else
            echo "typecheck_passed=false" >> $GITHUB_OUTPUT
            echo "❌ TypeScript errors still present after fix attempt"
            echo "FAILING: TypeScript errors were not resolved"
            exit 1
          fi

      - name: Run tests after all fixes
        run: npm run test:run

      - name: Build project
        run: npm run build

      - name: Check if PR is ready for merge
        id: merge-check
        run: |
          # All checks should have passed by this point
          if npm run typecheck && npm run test:run && npm run build; then
            echo "ready=true" >> $GITHUB_OUTPUT
            echo "✅ All checks passed - PR ready for merge"
          else
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "❌ Final validation failed - PR not ready for merge"
          fi

      - name: Auto-merge PR if ready
        if: steps.merge-check.outputs.ready == 'true'
        id: merge-attempt
        run: |
          echo "PR is ready for merge. Attempting merge..."
          # Try auto-merge first, then fallback to regular merge
          if gh pr merge ${{ github.event.pull_request.number }} --squash --auto; then
            echo "merge_success=true" >> $GITHUB_OUTPUT
            echo "✅ Auto-merge succeeded"
          elif gh pr merge ${{ github.event.pull_request.number }} --squash; then
            echo "merge_success=true" >> $GITHUB_OUTPUT
            echo "✅ Manual merge succeeded"
          else
            echo "merge_success=false" >> $GITHUB_OUTPUT
            echo "❌ Merge failed"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete branch after successful merge
        if: steps.merge-check.outputs.ready == 'true' && steps.merge-attempt.outputs.merge_success == 'true'
        run: |
          echo "Merge was successful, cleaning up branch..."
          # Wait a bit for merge to complete, then delete branch
          sleep 15
          if gh api repos/${{ github.repository }}/git/refs/heads/${{ github.head_ref }} -X DELETE; then
            echo "✅ Branch deleted successfully"
          else
            echo "ℹ️ Branch was already deleted or couldn't be deleted"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


